imp hacks :
1. issue : port already in use. solution :  sudo lsof -i :8000 then kill the process running on port.



set is different from an Array. array are ordered lists set of data whereas sets are unordered pool of data
!!!!!set are not meant to replace array but rather provide additional features to complete what array is missing.
best veaute of sets is that it removed duplicated from an array 


JAVASCRIPT MAP
holds key value pair and remembers the order of insertion of the keys
const myMap = new Map([ ['name','john'] , ['surname','doe' ] ])
js only supports one key object , for more than one storing we use maps
!!!!!!!maps is used to store multiple . key value objects in JAVASCRIPT


SERVER 
server . listen 
listen function m port , local host , and call back function


routing ---
res.writeHead (status code , {} object)
status code are many , that are standard , 
and object we give a header we send to give a little msg about our response , header are also some standard ones , also we can cutomise some as well
so header..content type " text/ html , browser now is expecting some html 
=header to be set b4 we send out our response



path -
using . (dot)
so in require , it means the current working directory 
but in path anywhere else in code it means , directory where the script in running
eg : ./dev-data/dev.json

fs.readFile(path , text format , callback function)

and readFileSync has no call back function , sync means no callback

top level code :
 the code outside callback function that only gets executed once when the code executes.
so , this is used to read the json file which has the main data we are using and manipulating,
so we only want to read it once for all the code and call back functions in the code.

eg :- const data = fs.readFileSync(`${__dirname}/dev-data/dev.json`,'UTF-8') ;
      const dataObj = JSON.parse(data);

      using this to avoid reading the file again and again.

data.json - it has array of details of products , key-value pair in strings.



JSON file format is as follows :
[{},{},{},{}]
or
[{"a":"b",
"c" : "d"},{"e":"f","g":"h"},{"i":1,"j":true}]

inside curly bracets key value pairs using colons
left and right both sides in upper commas
execpt on values side no commas for number and true/false 
eg :[{"i":1,"j":true}]
key value pair in one curly braket or object is sperated by commas



product.html -
templateoverview.html - 
templateCard.html - 

using url module :
we use url module because when we open link for products page id wise , it will show not found
but from using url parse we take variable pathname i.e /product for all the links , 
example for link http://127.0.0.1:8888/product?id=5 , pathname is /product so if i route with pathname variable using url parse it will display the page


    const cards = dataObj.map((el) => replaceTemplate(cardTemp, el));

    this gives an array
    so we need string so we doe
    const cards = dataObj.map((el) => replaceTemplate(cardTemp, el)).join(' ');

    .join('') converts it into string


imports happen at the top of the files and after importing the core modules


CSS notes
1. margin : auto - got my div in center

